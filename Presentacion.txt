Hola, mi nombre es Juan David Gonzalez Muñoz, soy de Bogotá y tengo 19 años de edad, me gusta ver series anime y series occidentales,
me gusta jugar juegos de video y entre mis favoritos se encuentra minecraft, hitman, alien isolation y lol wild rift. En programación
tengo experiencia programando en c++, java y javascript este ultimo lo estoy practicando actualmente y aunque no me considero el mejor,
me encanta programar.

RESUMEN VIDEO PROGRAMACION EN PYTHON

Resumen
Primero se ha de instalar Python en la computadora para poder utilizar este interprete de código. Python puede ser utilizado en la consola del sistema pero para mas facilidad se instalara el editor de código “Visual Studio Code”, el cual nos permitirá ver de una mejor forma los programas que realicemos.
Con el editor y la consola del sistema abiertos vamos a trabajar para empezar a realizar código. El código lo realizaremos en Visual Studio y el código lo ejecutaremos en el interprete de código que es la consola.
Se crea la carpeta que contendrá los archivos a trabajar y dentro de esta se crearan los archivos con la extensión de Python “.py”. 
En visual studio code:
Primero para imprimir un mensaje= print(“Hello World”) y para obtener ayuda de la consola se puede escribir en ella Python -h.


#Imprimir mensaje
print("Hello World")

#TIPOS DE DATOS

#String sensibles a las mayusculas, los dos strings no son los mismos
#Strings escritos con comillas dobles o simples
"Hello world" 'Hello World'
#concatenar Strings es unirlos
print("Bye" + " Life")


#Number es escribir el numero sin comillas
#Integer o entero
3, 2, 1, #son numeros, para realizar operaciones se utiliza + - * /
print((3+77)/2) # =40
#Float o decimal
32.5, 54.2, 14.54
print(3+77/2)  # =41.5

#Boolean o tipo de dato logico, estados
True, False
print(False)
print(True)

#List es una lista de datos o arreglo de datos
#pueden ser listas de Strings, numeros, booleanos o los 3 tipos
print([1, 2, 8, 6, 5])
print([1, "jota", False, "false"])
print([])#lista vacia


#Tuples son listas con datos que no pueden cambiar sus datos
print((20, 3, 4, 8, 54))
print(())#tupla vacia

#Dictionaries agrupar datos que pertenecen a una misma entidad
print({
    "NombrePersona ": "Jose",
    "Edad ": 18,
    "Apodo ": "pepe"
})

#None ningun dato definido
None


## VARIABLES ##
#para guardarl datos se puede utilizar un nombre clave, en relacion con los datos
#se puede guardar cualquier tipo de dato en una variable 
#los datos en las variables pueden ser modificados con diversos metodos y de diferentes maneras
#las varaibles son case sensitive osea que son sensibles a las mayusculas
name = "jose";
number = 96;
state = True;
decimal = 56.12;
lista = [4,5,8,4]
tupla = (5.9,8,5,4)

print(name)
print(type(name))
print(number)
print(type(number))
print(state)
print(type(state))
print(decimal)
print(type(decimal))
print(lista)
print(type(lista))
print(tupla)
print(type(tupla))
print((number + decimal))
print(type(number + decimal))

# formas de nombrar variables
#snake_case, cameCase, PascalCase es solo para leer el codigo, todas son validas

#Escribir en mayuscula puede ayudar a entender que es un valor constante
PI = 3.1416
print(PI)

#variables python son dinamicas, a una variable string e le puede asignar un numero
book = "LOL"
print(book)
book = 45
print(book)




#STRINGS STRINGS STRINGS STRINGS
# Str = "Hello,World"
# #dir() enseña que podemos hacer con ciertos tipos de datos
# #print(dir(Str))

# #metodos de los strings
# print(Str.upper())#mayusculas todo
# print(Str.lower())#minusculas todo
# print(Str.swapcase())#intercambia minusculas y mayusculas
# print(Str.capitalize())#primera letra mayuscula
# print(Str.replace("Hello","Ala"))#reemplaza txt 1Param por txt 2Param
# #se pueden encadenar metodos si es necesario
# print(Str.replace("Hello","Ala").upper())
# print(Str.count("H"))#en el param decimos que letra queremos contar en el texto
# print(Str.startswith("hola"))#repsuesta true or false si empieza o no
# print(Str.endswith("World"))#si termina con
# #dividir la cadena
# print(Str.split(","))#separa dependiendo del parametro y genera lista Str
# print(Str.find("W"))#devuelve posicion param en Str -1 = not found 
# #empieza a contar espacios desde la posicion 0
# print(len(Str))#devuelve longitud string
# print(Str.index("e"))#posicion
# print(Str.isnumeric())#numerico??
# print(Str.isalpha())#alfanumerico?
# print(Str[4])#obtener caracter de dicha posicion
# print(Str[-3])#empezamos a mirar desde el ultimo
# print("ohhh " + Str)#concatenamos strings
# print(f"ohhh {Str}")#con llaves y la f se pueden concatenar
# print("my name is {0}".format(Str))
#STRINGS STRINGS STRINGS STRINGS

#NUMBERS NUMBERS NUMBERS NUMBERS
# numeros decimales son float y enteros son integer
#operaciones + - * /
#para devolver entero division se utiliza  //
#para devolver el residuo, se utiliza modulo  %

#NUMBERS NUMBERS NUMBERS NUMBERS

#INTRODUCIR DATOS INTRODUCIR DATOS
# age = input("insert your age: ")
# #dato se guarda en variabe y el paramatero de input es el mensaje que queremos aparezca
# #todo dato guardado es de tipo string
# print(age)
# newAge = int(age) + 5 #int() el parametro se convierte en entero 
# print(newAge)  #float() para decimal y asi

#INTRODUCIR DATOS INTRODUCIR DATOS


## DICTIONARIES DICTIONARIES
#forma de agrupar datos que poseen relacion osea objetos
# product = {
#     "name": "book",
#     "quantity": 85,
#     "price": 5.11
# }
# print(product.keys())#obtenemos nombres de llaves del objeto
# print(product.items())#obtenemos llaves y datos de llaves
# del product # eliminar objeto
# # clear para limpiar objeto
# print(product)



# #guarda distintos datos con diferentes tipos
# #se puede crear con el constructor list()
# numberList = list((1,9,2,7)) #los datos han de ser puestos en una tupla
# print(numberList)

# #crear listas con rangos, desde, hasta un numero sin incluir el ultimo
# rango = list(range(1, 5)) #1,2,3,4
# print(rango)
# print(len(numberList))#numero de elementos de lista
# print(numberList[1])#devuelve dato que se encuentre en dicha posicion
# #lo mismo que con un string tambien se puede con valores negativos

# #saber si elemento esta en la lista
# print(2 in numberList)#devuelve false o true
# #ccambiar valores lista
# numberList[2] = 245 #posicion y valor que queremos
# print(numberList)

# numberList.append(64)#agregar dato
# numberList.extend([65,45])#agregar mas de un dato con lista o tupla
# print(numberList)

# numberList.insert(1,89) #insertamos dato en una posicion
# print(numberList) #1 param posicion 2 param dato
# numberList.insert(len(numberList),4)#insertar a lo ultimo
# print(numberList)
# numberList.pop(2) #quita el ultimo dato de la lista si vacio y quita con indice en param
# numberList.remove(65)#remueve el dato ingresado
# print(numberList)
# #numberList.clear() #quita todos los elementos

# lete = list(("s","c","j","c","d"))
# lete.sort()#organizar por alfabeto
# print(lete)
# lete.sort(reverse=True)#organizar alfa a la inversa
# print(lete)
# print(lete.index("c")) #posicion dato
# print(lete.count("c")) #cuantas veces dato

## TUPLAS TUPLAS TUPLAS TUPLAS

#son como listas pero de datos que no cambia
# metodos de listas pero sin los que cambian datos
# x = (1, 2, 3) #dato con una coma entre () se considera desde ahi una tupla
#tuple(x) #crear tupla con tupla
# print(x[1]) #ver dato en posicion



## SETS SETS SETS SETS
#son lo mismo que una lista con sus metodos solo que no poseen indice
# {4, 5, 6}  son datos que no estan organizados por indice ni nada




#dependiendo de una condicion previa, se desataran ciertas acciones
#si el numero x es menor que 30 sucedera cierta cosa
#si queremos saber si x es mayor que 30 se utiliza el condicional if que como resultado de la comparacion
#recibira false o true dependiendo de si la conjetura es verdadera o falsa
#operadores de comparacion > < == => =<
# x = 34
# if x <= 30:
#     print(f"{x} es menor o igual a 30")
# else:
#     print(f"{x} es mayor a 30")

# color = "blue"
# if color == "red":
#     print("red es rojo")
# elif color == "blue": #si no se sumple la primera
# #se puede ver si se cumple otra condicion o cuantas uno quiera
#     print("blue es azul")

# #para verificar diversas condiciones se utilizan los operadores logicos
# # and="y"  or="o"  not="no"
# x = 6
# if x > 4 and x < 12: #ambas condiciones deben cumplirse
#     print(f"{x} esta en el rango 111")
# if x > 4 or x < 12: #se debe cumplir aunque sea una condicion
#     print(f"{x} esta en el rango 222")
# if (not(x==7)): #si la condicion no se cumple, se ejecuta
#     print(f"{x} esta en el rango 333")



## LOOPS LOOPS LOOPS LOOPS
# for
#si necesito mostrar todos los datos en pantalla por separado
#no necesito hacer aparecer cada uno manualmente un ciclo for simplificara todo
# en vez de 
# print(numeros[0])
# print(numeros[1])
# print(numeros[2])
# print(numeros[3])
# print(numeros[4])
# print(numeros[5])
# se utiliza el iterador for
# numeros = [2, 6, 8, 9, 8, 5]
# for numero in numeros: #asumiremos que numero es el nombre de datos en numeros
#     if numero >5:#se pueden realizar validaciones en los bucles
#         print("yes") #por cada numero se realizara lo que este al nivel del iterador
#     print(numero)
#     if numero == 8:
#         break #break termina el bucle

# for numero in range(1,5):
#     print(numero)

# for letra in "megatron":
#     print(letra)

## ciclo while
# mientras la condicion se cumpla, se realizara lo que indiquemos
#si deja de cumplirse la condicion se termina la ejecucion
# count = 1
# while count <= 5:
#     print(f"{count} es menor a 5")
#     count = count + 1 #tener en cuenta que la condicion debe de ser posible que se termine para no hacer un ciclo infinito




#una funcion es una porcion de codigo que procesa la info que uno ingrese
# dependiendo de lo ingresado realizara una accion
#estas pueden ser usadas varias veces con tal de reciclar y hacer mas legible el codigo
def hello(name = "person"): #la asignacion del parametro se utiliza para cuando no se entrega un valor en el parametro
    print(f"hello {name}") #def para que sea tomada como funcion
hello("jose")
hello("juni")
hello() # tambien puede tener parametros con los cuales podemos realizar diversas acciones en la funcion

def add(n1 = 0,n2 = 0):
    return print(n1 + n2)
add(2,8)

#funciones anonimas (lambda)
add2 = lambda n1, n2: print(n1+n2)
add2(7,4)

#Modules 
#puedes usar los que estan preconstruidos
#puedes descargarlos
#o puedes crearlos tu mismo
#para los modulos puedes buscar la informacion via internet y aprender a usarlos con esa informacion

